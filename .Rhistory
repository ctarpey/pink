popmap<- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/STACKS/PopMap.txt")
filteredGenos<-cbind(popmap,filteredGenos)
filteredGenos$V1<- NULL
colnames(filteredGenos)[1]<-"Pop"
filteredGenos[1:5,1:5]
#create a dataframe for our MAF results
npops<- length(unique(filteredGenos$Pop))
nloci<- length(filteredGenos[,-1])
filteredGenos_POP_MAF<-matrix(nrow=npops, ncol=nloci)
rownames(filteredGenos_POP_MAF)<-as.vector(unique(filteredGenos$Pop)) #name the rows by the population names
colnames(filteredGenos_POP_MAF)<-colnames(filteredGenos[,-1])
for (i in 1:length(unique(filteredGenos$Pop))){
tempPop<-(unique(filteredGenos$Pop)[i])
tempGeno<-subset(filteredGenos, Pop == tempPop)
#print(tempPop)
#print(tempGeno[1:5,1:5])
tempMAF<-apply(tempGeno[,-1],2,calculateMAF)
#print(head(tempMAF))
filteredGenos_POP_MAF[i,]<-c(tempMAF)
#print(filteredGenos_POP_MAF[1:i,1:7])
}
filteredGenos_POP_MAF[1:5,1:5]
##### Filter the loci by the MAF results by population
##retain loci that were at least 0.05 in any of the 18 populations
lociMAF<-vector()
lociMAF<-apply(filteredGenos_POP_MAF,2,function(x) sum(x >=0.05, na.rm=TRUE))
lociMAF<-data.frame(keynames=names(lociMAF), value=lociMAF, row.names = NULL)
colnames(lociMAF)<-c("Locus", "PopsMAF")
#if the loci does not pass the test, delete it
locipassedMAF<-vector()
locipassedMAF<-subset(lociMAF, lociMAF[,2]!=0)
dim(locipassedMAF)
head(locipassedMAF)
# a second copy to use later to see what matches with our 16681
locipassedMAF_temp<-vector()
locipassedMAF_temp<-subset(lociMAF, lociMAF[,2]!=0)
head(locipassedMAF_temp)
#locipassedMAF <-locipassedMAF_temp #reset
#get unique tags from initial filtered dataset
locipassedMAF<-data.frame(str_split_fixed(locipassedMAF$Locus,"_",2))
colnames(locipassedMAF)<-c("Tag","SNP")
#locipassedMAF_tags$Locus<-locipassedMAF$Locus
head(locipassedMAF)
locipassedMAF<-unique(locipassedMAF$Tag)
length(locipassedMAF)
pink16681 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/STACKS/pink16681.txt")
pink16681 <- unlist(pink16681, use.names = FALSE)
length(pink16681)
locipassedMAF_temp<-locipassedMAF_temp[,1]
head(locipassedMAF_temp)
#locipassedMAF_temp<-locipassedMAF #to re-set
intersect_filteredWhitelist_16681 <- intersect(locipassedMAF_temp, pink16681)
diff_filteredWhitelist_16681 <-setdiff(pink16681,locipassedMAF_temp)
length(intersect_filteredWhitelist_16681)
head(locipassedMAF_temp)
length(diff_filteredWhitelist_16681)
head(diff_filteredWhitelist_16681)
#output list of filtered loci, need to open as binary file (using write binary, "wb") to give unix line endings
#format dataset to remove X from locus names
firstfilteredLociIDs<-gsub("X","",locipassedMAF)
head(firstfilteredLociIDs)
outputFile<-file("Z:/WORK/TARPEY/Exp_Pink_Pops/STACKS/Filtering/firstfilteredLociIDs", "wb")
write.table(firstfilteredLociIDs,outputFile,quote=FALSE,row.names=FALSE,col.names=FALSE,eol="\n")
close(outputFile)
pop_key
NorthAmerica_tt
pop_key
ALL_col_test <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490", SUSIT13= "#563e7f", HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee", KUSHI06 = "#61005e", KUSHI07 = "#61005e", LAKEL06 = "black", LAKEL07 = "red",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", SUSIT14 ="#563e7f",TAUY09 = "#e0957e", TAUY12 = "#e0957e")
ggplot(data = ALL_tt) + geom_point(aes(x = V3, y = V4,  color = POPNAME, shape = LINEAGE), alpha = .8, size = 4) +
scale_colour_manual(values = ALL_col_test, name ="Population") +
scale_x_continuous(trans="reverse") + scale_y_continuous(trans="reverse") +
theme_classic() + theme(text = element_text(size= 20), legend.title = element_blank(),legend.text = element_text(size= 17),
axis.line.x = element_line(), axis.line.y = element_line()) +
labs(list(title= "All Populations TEST Principal Components 1 & 2", x = "Principal Component 1", y = "Principal Component 2", size = 30))
####ALL lineage test for Lakel06 and 07
pdf("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/PCAimages/Lakel06_07_lineageTest.pdf", width = 9, height = 7)
ALL_col_test <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490", SUSIT13= "#563e7f", HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee", KUSHI06 = "#61005e", KUSHI07 = "#61005e", LAKEL06 = "black", LAKEL07 = "red",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", SUSIT14 ="#563e7f",TAUY09 = "#e0957e", TAUY12 = "#e0957e")
ggplot(data = ALL_tt) + geom_point(aes(x = V3, y = V4,  color = POPNAME, shape = LINEAGE), alpha = .8, size = 4) +
scale_colour_manual(values = ALL_col_test, name ="Population") +
scale_x_continuous(trans="reverse") + scale_y_continuous(trans="reverse") +
theme_classic() + theme(text = element_text(size= 20), legend.title = element_blank(),legend.text = element_text(size= 17),
axis.line.x = element_line(), axis.line.y = element_line()) +
labs(list(title= "All Populations TEST Principal Components 1 & 2", x = "Principal Component 1", y = "Principal Component 2", size = 30))
dev.off()
####ALL lineage test for Lakel06 and 07
pdf("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/PCAimages/Lakel06_07_lineageTest.pdf", width = 9, height = 7)
ALL_col_test <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490", SUSIT13= "#563e7f", HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee", KUSHI06 = "#61005e", KUSHI07 = "#61005e", LAKEL06 = "black", LAKEL07 = "red",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", SUSIT14 ="#563e7f",TAUY09 = "#e0957e", TAUY12 = "#e0957e")
ggplot(data = ALL_tt) + geom_point(aes(x = V3, y = V4,  color = POPNAME, shape = LINEAGE), alpha = .8, size = 4) +
scale_colour_manual(values = ALL_col_test, name ="Population") +
scale_x_continuous(trans="reverse") + scale_y_continuous(trans="reverse") +
theme_classic() + theme(text = element_text(size= 20), legend.title = element_blank(),legend.text = element_text(size= 17),
axis.line.x = element_line(), axis.line.y = element_line()) +
labs(list(title= "All Populations TEST ", x = "Principal Component 1", y = "Principal Component 2", size = 30))
dev.off()
ggplot(data = ALL_tt) + geom_point(aes(x = V3, y = V4,  color = POPNAME, shape = LINEAGE), alpha = .8, size = 4) +
scale_colour_manual(values = ALL_col_test, name ="Population") +
scale_x_continuous(trans="reverse") + scale_y_continuous(trans="reverse") +
theme_classic() + theme(text = element_text(size= 20), legend.title = element_blank(),legend.text = element_text(size= 17),
axis.line.x = element_line(), axis.line.y = element_line()) +
labs(list(title= "All Populations TEST ", x = "Principal Component 1", y = "Principal Component 2", size = 30))
pop_key <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/Summary_Stats/POPINFO.txt", header = TRUE, sep = '\t')
ALL_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/PCA/filter_inds_pca.eigenvec")
head(ALL_eigenvec_table)
ALL_tt = merge(ALL_eigenvec_table,pop_key, by.x = 'V1', by.y = 'CLUSTER')
ALL_geo <- ALL_tt[order(ALL_tt$Order_geo),] #sort by a geographical order, then odd then even
head(ALL_geo)
ggplot(data= ALL_geo) + geom_point(aes(x=V3, y=V4, color= ALL_geo$POPNAME, shape =ALL_geo$LINEAGE), alpha=.5, size=3) +
scale_colour_manual(values = tol18rainbow, name ="Population", labels = "Lineage")
ggplot(data = ALL_geo) + geom_point(aes(x = V3, y = V4,  color = POPNAME, shape = LINEAGE), alpha = .8, size = 4) +
scale_colour_manual(values = ALL_col, name ="Population", labels = c("Amur even", "Amur odd",
"Kamchatka odd", "Kamchatka even", "Prince William Sound odd", "Prince William Sound even", "Hokkaido even",
"Hokkaido odd", "Norton Sound odd", "Norton Sound even", "Puget Sound odd", "Puget Sound even", "Magadan odd","Magadan even")) +
scale_x_continuous(trans="reverse") + scale_y_continuous(trans="reverse") +
theme_classic() + theme(text = element_text(size= 20), legend.title = element_blank(),legend.text = element_text(size= 17),
axis.line.x = element_line(), axis.line.y = element_line()) +
labs(list(title= "All Populations Principal Components 1 & 2", x = "Principal Component 1 (30.24%)", y = "Principal Component 2 (13.83%)", size = 30))
pop_key2 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/Summary_Stats/POPINFO.txt", header = TRUE, sep = '\t')
ALL_plink_filter <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/PCA/filter_inds_pca.eigenvec")
head(ALL_plink_filter)
ALL_plink_filter_tt = merge(ALL_plink_filter,pop_key2, by.x = 'V1', by.y = 'CLUSTER')
ALL_plink_filter_geo <- ALL_plink_filter_tt[order(ALL_plink_filter_tt$Order_geo),] #sort by a geographical order, then odd then even
head(ALL_plink_filter_geo)
ALL_col_test <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490", SUSIT13= "#563e7f", HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee", KUSHI06 = "#61005e", KUSHI07 = "#61005e", LAKEL06 = "black", LAKEL07 = "red",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", SUSIT14 ="#563e7f",TAUY09 = "#e0957e", TAUY12 = "#e0957e")
ggplot(data= ALL_plink_filter_geo) + geom_point(aes(x=V3, y=V4, color= ALL_plink_filter_geo$POPNAME, shape =ALL_plink_filter_geo$LINEAGE), alpha=.5, size=3) +
scale_colour_manual(values = ALL_col_test, name ="Population", labels = "Lineage")
ggplot(data= ALL_plink_filter_geo) + geom_point(aes(x=V3, y=V4, color= ALL_plink_filter_geo$POPNAME, shape =ALL_plink_filter_geo$LINEAGE), alpha=.5, size=3) +
scale_colour_manual(values = ALL_col_test, name ="Population")
ggplot(data= ALL_plink_filter_geo) + geom_point(aes(x=V3, y=V4, color= ALL_plink_filter_geo$POPNAME, shape =ALL_plink_filter_geo$LINEAGE), alpha=.5, size=3) +
theme_classic() + theme(text = element_text(size= 20), legend.title = element_blank(),legend.text = element_text(size= 17),
axis.line.x = element_line(), axis.line.y = element_line()) +scale_colour_manual(values = ALL_col_test, name ="Population")
ggplot(data= ALL_plink_filter_geo) + geom_point(aes(x=V3, y=V4, color= ALL_plink_filter_geo$POPNAME, shape =ALL_plink_filter_geo$LINEAGE), alpha=.5, size=3) +
theme_classic() + theme(text = element_text(size= 15), legend.title = element_blank(),legend.text = element_text(size= 17),
axis.line.x = element_line(), axis.line.y = element_line()) +scale_colour_manual(values = ALL_col_test, name ="Population")
ggplot(data= ALL_plink_filter_geo) + geom_point(aes(x=V3, y=V4, color= ALL_plink_filter_geo$POPNAME, shape =ALL_plink_filter_geo$LINEAGE), alpha=.5, size=3) +
theme_classic() + theme(text = element_text(size= 15), legend.title = element_blank(),legend.text = element_text(size= 14),
axis.line.x = element_line(), axis.line.y = element_line()) +scale_colour_manual(values = ALL_col_test, name ="Population")
ggplot(data= ALL_plink_filter_geo) + geom_point(aes(x=V3, y=V4, color= ALL_plink_filter_geo$POPNAME, shape =ALL_plink_filter_geo$LINEAGE), alpha=.8, size=4) +
theme_classic() + theme(text = element_text(size= 15), legend.title = element_blank(),legend.text = element_text(size= 14),
axis.line.x = element_line(), axis.line.y = element_line()) +scale_colour_manual(values = ALL_col_test, name ="Population")
pop_key <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/POPINFO_updated.txt", header = TRUE, sep = '\t')
pop_key_OLD <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/POPINFO_OLD.txt", header = TRUE, sep = '\t')
ALL_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/All_pops_pca.eigenvec")
ALL_tt = merge(ALL_eigenvec_table, pop_key, by.x = 'V1', by.y = 'POP')
ALL_geo <- ALL_tt[order(ALL_tt$Order_geo),] #sort by a geographical order, then odd then even
Beringia_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/Beringia_pops_pca.eigenvec")
Beringia_tt = merge(Beringia_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
Beringia_geo <- Beringia_tt[order(Beringia_tt$Order_geo),] #sort by a geographical order, then odd then even
NorthAmerica_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/NorthAmerica_pops_pca.eigenvec")
NorthAmerica_tt = merge(NorthAmerica_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
NorthAmerica_geo <- NorthAmerica_tt[order(NorthAmerica_tt$Order_geo),] #sort by a geographical order, then odd then even
Odd_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/Odd_pops_pca.eigenvec")
Odd_tt = merge(Odd_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
odd_geo <- Odd_tt[order(Odd_tt$Order_geo),] #sort by a geographical order, then odd then even
Even_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/Even_pops_pca.eigenvec")
Even_tt = merge(Even_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
Even_geo <- Even_tt[order(Even_tt$Order_geo),] #sort by a geographical order, then odd then even
Old_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/Old_pops_new_genes_pca.eigenvec")
Old_tt = merge(Old_eigenvec_table,pop_key_OLD, by.x = 'V1', by.y = 'POP')
#Old_geo <- Old_tt[order(Old_tt$Order_geo),] #sort by a geographical order, then odd then even
New_pops_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/New_pops_pca.eigenvec")
New_pops_tt = merge(New_pops_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
New_pops_geo <- New_pops_tt[order(New_pops_tt$Order_geo),] #sort by a geographical order, then odd then even
NoSusitna_pops_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/ALL_noSusitna_pca.eigenvec")
NoSusitna_pops_tt = merge(NoSusitna_pops_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
NoSusitna_pops_geo <- NoSusitna_pops_tt[order(NoSusitna_pops_tt$Order_geo),] #sort by a geographical order, then odd then even
##########################By population
AMUR10_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/AMUR10_pca.eigenvec")
AMUR10_tt = merge(AMUR10_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
AMUR11_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/AMUR11_pca.eigenvec")
AMUR11_tt = merge(AMUR11_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
HAYLY09_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/HAYLY09_pca.eigenvec")
HAYLY09_tt = merge(HAYLY09_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
HAYLY10_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/HAYLY10_pca.eigenvec")
HAYLY10_tt = merge(HAYLY10_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
KOPPE91_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/KOPPE91_pca.eigenvec")
KOPPE91_tt = merge(KOPPE91_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
KOPPE96_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/KOPPE96_pca.eigenvec")
KOPPE96_tt = merge(KOPPE96_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
KUSHI06_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/KUSHI06_pca.eigenvec")
KUSHI06_tt = merge(KUSHI06_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
KUSHI07_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/KUSHI07_pca.eigenvec")
KUSHI07_tt = merge(KUSHI07_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
LAKEL06_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/LAKEL06_pca.eigenvec")
LAKEL06_tt = merge(LAKEL06_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
LAKEL07_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/LAKEL07_pca.eigenvec")
LAKEL07_tt = merge(LAKEL07_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
NOME91_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/NOME91_pca.eigenvec")
NOME91_tt = merge(NOME91_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
NOME94_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/NOME94_pca.eigenvec")
NOME94_tt = merge(NOME94_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
SNOH03_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/SNOH03_pca.eigenvec")
SNOH03_tt = merge(SNOH03_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
SNOH96_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/SNOH96_pca.eigenvec")
SNOH96_tt = merge(SNOH96_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
SUSIT13_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/SUSIT13_pca.eigenvec")
SUSIT13_tt = merge(SUSIT13_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
SUSIT14_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/SUSIT14_pca.eigenvec")
SUSIT14_tt = merge(SUSIT14_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
TAUY09_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/TAUY09_pca.eigenvec")
TAUY09_tt = merge(TAUY09_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
TAUY12_eigenvec_table <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/tauy12_edit_pca.eigenvec")
TAUY12_tt = merge(TAUY12_eigenvec_table,pop_key, by.x = 'V1', by.y = 'POP')
names(ALL_tt)
#####COLORS
ALL_col <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490", SUSIT13= "#563e7f", HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee", KUSHI06 = "#61005e", KUSHI07 = "#61005e", LAKEL06 = "#2171b5",LAKEL07 = "#2171b5",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", SUSIT14 ="#563e7f",TAUY09 = "#e0957e", TAUY12 = "#e0957e")
ALL_col_noSusitna <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490", HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee", KUSHI06 = "#61005e", KUSHI07 = "#61005e", LAKEL06 = "#2171b5",LAKEL07 = "#2171b5",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", TAUY09 = "#e0957e", TAUY12 = "#e0957e")
Ber_col <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490",  HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KUSHI06 = "#61005e", KUSHI07 = "#61005e",
NOME91 = "#677f3e", NOME94 = "#677f3e", TAUY09 = "#e0957e", TAUY12 = "#e0957e")
NA_col <-c(SUSIT13= "#563e7f",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee",LAKEL06 = "#2171b5",LAKEL07 = "#2171b5",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", SUSIT14 ="#563e7f")
OLD_col <-c(AMUR10 = "#cd5490", AMUR11 = "#cd5490",  HAYLY09 = "#c9cf4a", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee", KOPPE91 = "#7297ee", KUSHI06 = "#61005e", KUSHI07 = "#61005e",
NOME91 = "#677f3e", NOME94 = "#677f3e", SNOH03 = "#00158a", SNOH96 ="#00158a", TAUY09 = "#e0957e", TAUY12 = "#e0957e")
NEW_col <-c(SUSIT13= "#563e7f", LAKEL06 = "#2171b5",LAKEL07 = "#2171b5", SUSIT14 ="#563e7f")
Odd_col <-c(AMUR11 = "#cd5490", SUSIT13= "#563e7f", HAYLY09 = "#c9cf4a",
KOPPE91 = "#7297ee", KUSHI07 = "#61005e", LAKEL07 = "#2171b5",
NOME91 = "#677f3e", SNOH03 = "#00158a", TAUY09 = "#e0957e")
Even_col <-c(AMUR10 = "#cd5490", HAYLY10 = "#c9cf4a",
KOPPE96 = "#7297ee",  KUSHI06 = "#61005e",LAKEL06 = "#2171b5",
NOME94 = "#677f3e", SNOH96 ="#00158a", SUSIT14 ="#563e7f", TAUY12 = "#e0957e")
NEW16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/QC_test_16681_new_genotypes/NEW_genepop_16662.txt")
pop_key <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/PLINK/TEST_PCA/POPINFO_updated.txt", header = TRUE, sep = '\t')
NEW16662
length(NEW16662)
dim(NEW16662)
popmap<- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/STACKS/PopMap.txt")
popmap<- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/STACKS/PopMap.txt")
NEW16662_pops<-cbind(popmap,NEW16662)
ALL16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_all.genepop.txt")
NEw16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_NEW.genepop.txt")
OLD16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_old.genepop.txt")
popmap_all <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/PopMap.txt")
popmap_old <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/PopMap_old.txt")
popmap_new <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/PopMap_new.txt")
ALL16662_pops<-cbind(popmap_all,ALL16662)
ALL16662_pops$V1<- NULL
colnames(ALL16662_pops)[1]<-"Pop"
ALL16662_pops[1:5,1:5]
length(ALL16662_pops)
NEW16662_pops<-cbind(popmap_new,NEW16662)
NEw16662
NEW16662_pops<-cbind(popmap_new,NEW16662)
NEw16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_NEW.genepop.txt")
dim(NEW16662)
NEw16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_NEW.genepop.txt")
NEW16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_NEW.genepop.txt")
NEW16662_pops<-cbind(popmap_new,NEW16662)
NEW16662_pops$V1<- NULL
colnames(NEW16662_pops)[1]<-"Pop"
NEW16662_pops[1:5,1:5]
length(NEW16662_pops)
dim(NEW16662_pops)
OLD16662_pops<-cbind(popmap_old,OLD16662)
OLD16662_pops$V1<- NULL
colnames(OLD16662_pops)[1]<-"Pop"
OLD16662_pops[1:5,1:5]
length(OLD16662_pops)
dim(OLD16662_pops)
OLD16662_pops[1:5,1:5]
genos1[1:5,1:5]
ALL16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_all.genepop.txt",colClasses="factor")
NEW16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_NEW.genepop.txt",colClasses="factor")
OLD16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_old.genepop.txt",colClasses="factor")
popmap_all <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/PopMap.txt")
popmap_old <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/PopMap_old.txt")
popmap_new <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/PopMap_new.txt")
ALL16662_pops<-cbind(popmap_all,ALL16662)
ALL16662_pops$V1<- NULL
colnames(ALL16662_pops)[1]<-"Pop"
ALL16662_pops[1:5,1:5]
length(ALL16662_pops)
dim(ALL16662_pops)
NEW16662_pops<-cbind(popmap_new,NEW16662)
NEW16662_pops$V1<- NULL
colnames(NEW16662_pops)[1]<-"Pop"
NEW16662_pops[1:5,1:5]
length(NEW16662_pops)
dim(NEW16662_pops)
OLD16662_pops<-cbind(popmap_old,OLD16662)
OLD16662_pops$V1<- NULL
colnames(OLD16662_pops)[1]<-"Pop"
OLD16662_pops[1:5,1:5]
length(OLD16662_pops)
dim(OLD16662_pops)
OLD16662_pops[1:5,1:5]
ALL16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_all.genepop.txt",colClasses="factor",header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
ALL16662 <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_16662_all.genepop.txt",colClasses="factor")
ALL16662_pops<-cbind(popmap_all,ALL16662)
ALL16662_pops$V1<- NULL
colnames(ALL16662_pops)[1]<-"Pop"
ALL16662_pops[1:5,1:5]
length(ALL16662_pops)
dim(ALL16662_pops)
#if we want to see what was eliminated here
NEW_16662_even<-NEW16662_pops[NEW16662_pops$Pop=c("Lakel06","Lakel07")]
NEW_16662_Lakel <-subset(NEW16662_pops[Lakel06,])
Lakel06 <- "PLAKEL06"
NEW_16662_Lakel <-subset(NEW16662_pops[Lakel06,])
NEW_16662_Lakel
head(NEW_16662_Lakel)
NEW_16662_Lakel[1:5,1:5]
NEW_16662_Lakel <-subset(NEW16662_pops$Pop[Lakel06,])
NEW_16662_Lakel <-subset(NEW16662_pops, Pop = Lakel06)
NEW_16662_Lakel[1:5,1:5]
dim(NEW_16662_Lakel)
NEW_16662_Lakel <-subset(NEW16662_pops, Pop == Lakel06)
NEW_16662_Lakel[1:5,1:5]
dim(NEW_16662_Lakel)
NEW_16662_Lakel_even <-subset(NEW16662_pops, Pop == Lakel06)
NEW_16662_Lakel_odd <-subset(NEW16662_pops, Pop == Lakel07)
NEW_16662_Lakel_odd[1:5,1:5]
Lakel07 <- "PLAKEL07"
NEW_16662_Lakel_odd <-subset(NEW16662_pops, Pop == Lakel07)
NEW_16662_Lakel_odd[1:5,1:5]
dim(NEW_16662_Lakel_odd)
OLD_16662_even_pops <- c("PAMUR10","PHAYLY10","PKOPE96","PKUSHI06","PNOME94","PSNOH96","PTAUY12")
OLD_16662_odd_pops <-c("PAMUR11","PHAYLY09","PKOPE91","PKUSHI07","PNOME91","PSNOH03","PTAUY09",)
OLD_16662_odd_pops <-c("PAMUR11","PHAYLY09","PKOPE91","PKUSHI07","PNOME91","PSNOH03","PTAUY09")
OLD_16662_even <-subset(OLD16662_pops, Pop == OLD_16662_even_pops)
install.packages("tidyverse")
library(tidyr)
#Pink data filtering
library(ggplot2)
library(vcfR)
library(stringr)
library(dplyr)
library(gdata)
library(tidyr)
install.packages("tidyverse")
install.packages("tidyverse")
NEW_16662_Lakel_odd <-subset(NEW16662_pops, Pop == c("PAMUR11","PHAYLY09","PKOPE91","PKUSHI07","PNOME91","PSNOH03","PTAUY09"))
NEW_16662_Lakel_odd <-subset(NEW16662_pops, Pop == "PAMUR11" | Pop == "PHAYLY09" | Pop == "PKOPE91" | Pop == "PKUSHI07" | Pop == "PNOME91" | Pop == "PSNOH03" | Pop == "PTAUY09")
NEW_16662_Lakel_odd[1:5,1:5]
NEW16662_pops<-cbind(popmap_new,NEW16662)
NEW16662_pops$V1<- NULL
colnames(NEW16662_pops)[1]<-"Pop"
NEW16662_pops[1:5,1:5]
length(NEW16662_pops)
NEW_16662_Lakel_odd <-subset(NEW16662_pops, Pop == Lakel07)
NEW_16662_Lakel_odd[1:5,1:5]
dim(NEW_16662_Lakel_odd)
OLD_16662_odd <-subset(OLD16662_pops, Pop == "PAMUR11" | Pop == "PHAYLY09" | Pop == "PKOPE91" | Pop == "PKUSHI07" | Pop == "PNOME91" | Pop == "PSNOH03" | Pop == "PTAUY09")
OLD_16662_odd[1:5,1:5]
dim(OLD_16662_odd)
OLD_16662_even <-subset(OLD16662_pops,Pop == "PAMUR10" | Pop == "PHAYLY10" | Pop == "PKOPE96" | Pop == "PKUSHI06" | Pop == "PNOME94" | Pop == "PSNOH96" | Pop == "PTAUY12")
OLD_16662_even[1:5,1:5]
dim(OLD_16662_even)
NEW_16662_Lakel_even_genos <- NEW_16662_Lakel_even[,-c(1:2)]
NEW_16662_Lakel_odd_genos <- NEW_16662_Lakel_odd[,-c(1:2)]
OLD_16662_even_genos <- OLD_16662_even[,-c(1:2)]
OLD_16662_odd_genos <- OLD_16662_odd[,-c(1:2)]
#L=ncol(population)   #how many columns are there?
a <- ncol(NEW_16662_Lakel_even_genos)
b <- ncol(NEW_16662_Lakel_odd_genos)
c <- ncol(OLD_16662_even_genos)
d <- ncol(OLD_16662_odd_genos)
a_locus_positions=(2*(unique(round((1:(a-2))/2)))+1)
b_locus_positions=(2*(unique(round((1:(b-2))/2)))+1)
c_locus_positions=(2*(unique(round((1:(c-2))/2)))+1)
d_locus_positions=(2*(unique(round((1:(d-2))/2)))+1)
OUT=NULL        #create a null dataset to append allele freqs to
a <- ncol(NEW_16662_Lakel_even_genos)
b <- ncol(NEW_16662_Lakel_odd_genos)
c <- ncol(OLD_16662_even_genos)
d <- ncol(OLD_16662_odd_genos)
a_locus_positions <- (2*(unique(round((1:(a-2))/2)))+1)
b_locus_positions <- (2*(unique(round((1:(b-2))/2)))+1)
c_locus_positions <- (2*(unique(round((1:(c-2))/2)))+1)
d_locus_positions <- (2*(unique(round((1:(d-2))/2)))+1)
anames <- colnames(NEW_16662_Lakel_even_genos)
bnames <- colnames(NEW_16662_Lakel_odd_genos)
cnames <- colnames(OLD_16662_even_genos)
dnames <- colnames(OLD_16662_odd_genos)
OUT=NULL        #create a null dataset to append allele freqs to
a_OUT=NULL        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(NEW_16662_Lakel_even_genos[,x],NEW_16662_Lakel_even_genos[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[-which(alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
a_OUT <<- rbind(a_OUT,output)
}
for (x in a_locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(NEW_16662_Lakel_even_genos[,x],NEW_16662_Lakel_even_genos[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[-which(alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
a_OUT <<- rbind(a_OUT,output)
}
for (x in a_locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(NEW_16662_Lakel_even_genos[,x],NEW_16662_Lakel_even_genos[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[-which(alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,anames[x],alleles4)                        #combine x, locusname, and frequencies
a_OUT <<- rbind(a_OUT,output)
}
anames <- colnames(NEW_16662_Lakel_even_genos)
a_OUT=NULL        #create a null dataset to append allele freqs to
for (x in a_locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(NEW_16662_Lakel_even_genos[,x],NEW_16662_Lakel_even_genos[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[-which(alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,anames[x],alleles4)                        #combine x, locusname, and frequencies
a_OUT <<- rbind(a_OUT,output)
}
NEW_16662_Lakel_even_genos <- NEW_16662_Lakel_even[,-c(1:2)]
NEW_16662_Lakel_odd_genos <- NEW_16662_Lakel_odd[,-c(1:2)]
OLD_16662_even_genos <- OLD_16662_even[,-c(1:2)]
OLD_16662_odd_genos <- OLD_16662_odd[,-c(1:2)]
#L=ncol(population)   #how many columns are there?
a <- ncol(NEW_16662_Lakel_even_genos)
b <- ncol(NEW_16662_Lakel_odd_genos)
c <- ncol(OLD_16662_even_genos)
d <- ncol(OLD_16662_odd_genos)
a_locus_positions <- (2*(unique(round((1:(a-2))/2)))+1)
b_locus_positions <- (2*(unique(round((1:(b-2))/2)))+1)
c_locus_positions <- (2*(unique(round((1:(c-2))/2)))+1)
d_locus_positions <- (2*(unique(round((1:(d-2))/2)))+1)
#lnames=colnames(population)                          #locus names, from the header
anames <- colnames(NEW_16662_Lakel_even_genos)
bnames <- colnames(NEW_16662_Lakel_odd_genos)
cnames <- colnames(OLD_16662_even_genos)
dnames <- colnames(OLD_16662_odd_genos)
anames
NEW_16662_Lakel_even_genos <- NEW_16662_Lakel_even[,-c(1:2)]
NEW_16662_Lakel_even_genos[1:6;1:6]
NEW_16662_Lakel_even_genos[1:,1:6]
NEW_16662_Lakel_even_genos[1:6,1:6]
NEW_16662_Lakel_even_genos <- NEW_16662_Lakel_even[,-1]
NEW_16662_Lakel_even_genos[1:6,1:6]
NEW_16662_Lakel_odd_genos <- NEW_16662_Lakel_odd[,-1]
OLD_16662_even_genos <- OLD_16662_even[,-1]
OLD_16662_odd_genos <- OLD_16662_odd[,-1]
NEW_16662_Lakel_even_genos[1:6,1:6]
dim(NEW_16662_Lakel_even_genos)
NEW_16662_Lakel_odd_genos[1:6,1:6]
dim(NEW_16662_Lakel_odd_genos)
OLD_16662_even_genos[1:6,1:6]
dim(OLD_16662_even_genos)
OLD_16662_odd_genos[1:6,1:6]
dim(OLD_16662_odd_genos)
#L=ncol(population)   #how many columns are there?
a <- ncol(NEW_16662_Lakel_even_genos)
b <- ncol(NEW_16662_Lakel_odd_genos)
c <- ncol(OLD_16662_even_genos)
d <- ncol(OLD_16662_odd_genos)
a_locus_positions <- (2*(unique(round((1:(a-2))/2)))+1)
b_locus_positions <- (2*(unique(round((1:(b-2))/2)))+1)
c_locus_positions <- (2*(unique(round((1:(c-2))/2)))+1)
d_locus_positions <- (2*(unique(round((1:(d-2))/2)))+1)
a_locus_positions
a
for (x in a) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(NEW_16662_Lakel_even_genos[,x],NEW_16662_Lakel_even_genos[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[-which(alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,anames[x],alleles4)                        #combine x, locusname, and frequencies
a_OUT <<- rbind(a_OUT,output)
}
source('~/GitHub/Pink/Extended_pop_analysis/Loci_that_differentiate_lineage_test.R')
install.packages("genepop")
NEW_16662_Lakel_even <-subset(NEW16662_pops, Pop == Lakel06)
NEW_16662_Lakel_even[1:5,1:5]
dim(NEW_16662_Lakel_even)
NEW_16662_Lakel_odd <-subset(NEW16662_pops, Pop == Lakel07)
NEW_16662_Lakel_odd[1:5,1:5]
dim(NEW_16662_Lakel_odd)
OLD_16662_even <-subset(OLD16662_pops,Pop == "PAMUR10" | Pop == "PHAYLY10" | Pop == "PKOPE96" | Pop == "PKUSHI06" | Pop == "PNOME94" | Pop == "PSNOH96" | Pop == "PTAUY12")
OLD_16662_even[1:5,1:5]
dim(OLD_16662_even)
OLD_16662_odd <-subset(OLD16662_pops, Pop == "PAMUR11" | Pop == "PHAYLY09" | Pop == "PKOPE91" | Pop == "PKUSHI07" | Pop == "PNOME91" | Pop == "PSNOH03" | Pop == "PTAUY09")
OLD_16662_odd[1:5,1:5]
dim(OLD_16662_odd)
NEW_16662_Lakel_even_genos <- NEW_16662_Lakel_even[,-1]
NEW_16662_Lakel_odd_genos <- NEW_16662_Lakel_odd[,-1]
OLD_16662_even_genos <- OLD_16662_even[,-1]
OLD_16662_odd_genos <- OLD_16662_odd[,-1]
lakel_even_genind <- df2genind(NEW_16662_Lakel_even_genos, ploidy= 2)
lakel_even_genind <- df2genind(NEW_16662_Lakel_even_genos,ncode = 2, ploidy= 2)
NEW_16662_genepop <- read.genepop("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_NEW_Even_Odd.gen")
OLD_16662_genepop <- read.genepop("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/batch_4_OLD_Even_Odd.gen")
OLD_E_O <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/OLD_E_O_allele_freq.txt")
NEW_E_O <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/NEW_E_O_allele_freq.txt")
OLD_E_O <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/OLD_E_O_allele_freq.txt", header= TRUE, na.strings = "NA")
OLD_E_O <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/OLD_E_O_allele_freq.txt", header= TRUE, na.strings = "NA")
NEW_E_O <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/NEW_E_O_allele_freq.txt", header= TRUE, na.strings = "NA" )
OLD_E_O <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/OLD_E_O_allele_freq.txt", header= TRUE, na.strings = "NA")
NEW_E_O <- read.table("Z:/WORK/TARPEY/Exp_Pink_Pops/FilteringGenotypes/Lakel_lineage_test/NEW_E_O_allele_freq.txt", header= TRUE, na.strings = "NA" )
